package com.company;

public class MethNestTry {
    /* Операторы try могут быть неявно вложены в вызовы методов. */
    static void nestTry(int a){
        try { // вложенный блок try. У него нет своего catch на случай нуля. только для выхода за пределы массива
                 /* Если указан один аргумент командной строки, то исключение в связи с делением на нуль
                 будет сгенерировано в следующем коде. */
            if (a == 1)
                a = a / (a-a); // деление на нуль
                /* Если указаны два аргумента командной строки, то генерируется исключение в связи
                с выходом за пределы массива. */
            if (a == 2){
                int [] c = {1};
                c[42] = 99; // здесь генерируется исключение в связи с выходом за пределы массива
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Индекс за пределами массива: " + e);
        }
    }

    public static void main(String[] args) {
        try{
            int a = args.length;
            /* Если не указаны аргументы командной строки, в следующем операторе будет сгенерировано
             исключение в связи с делением на нуль. */
            int b = 42 / a;
            System.out.println("a = " + a);
            nestTry(a); // Метод, вызывающий вложенный try
        } catch (ArithmeticException e){
            System.out.println("Деление на ноль: " + e);
        }
    }
}

// Вложение операторов try может быть не столь очевидным при вызовах методов.
//Например, вызов метода можно заключить в блок оператора t ry, а в теле этого
//метода организовать еще один блок оператора try. В этом случае блок оператора
//t ry в теле метода оказывается вложенным во внешний блок оператора t ry,
//откуда вызывается этот метод.