package com.company;

public class Main {

    public static void main(String[] args) {
	// 5.1 5 + 2 / 8
           int a1 = 5;
           int b1 = 2;
           int c1 = 8;
           int result1 = a1 + b1 / c1;
           System.out.println("Результат вычисления примера 5.1: " + result1);
        // 1) Деление имеет приоритет выше, чем сложение: 2 / 8 = 0.25. При делении целочисленных выражений дробная чать
        // отбрасывается. Результат операции деления: 0.
        // 2) Сложение. 5 + 0 = 5.
        // Ответ: 5. Результат совпадает. Программа работает корректно.

        //5.2 (5 + 2) / 8
        int a2 = 5;
        int b2 = 2;
        int c2 = 8;
        int result2 = (a2 + b2) / c2;
        System.out.println("Результат вычисления примера 5.2: " + result2);
        // 1) Скобки имеют больший приоритет, чем деление. Сложение: 5 + 2 = 7
        // 2) Деление. 7 / 8 = 0.875. При делении целочисленных выражений дробная чать отбрасывается.
        // Результат операции деления: 0.
        // Ответ: 0. Результат совпадает. Программа работает корректно.

        //5.3 (5 + 2++) / 8
        int a3 = 5;
        int b3 = 2;
        int c3 = 8;
        int result3 = (a3 + b3++) / c3;
        System.out.println("Результат вычисления примера 5.2: " + result3);
        // 1) Скобки имеют больший приоритет, чем деление.
        // 2) Операция инкремента производится после операции сложения. На момент сложения b3 = 2
        // т.о. 5 + 2 = 7 (результат операции в скобках). b3 уже равен 3 (значение сохранено в памяти).
        // 3) Деление. 7 / 8 = 0.875. При делении целочисленных выражений дробная чать отбрасывается.
        // Результат операции деления: 0.
        // Ответ: 0. Результат совпадает. Программа работает корректно.

        //5.4 (5 + 2++) / —8
        int a4 = 5;
        int b4 = 2;
        int c4 = 8;
        int result4 = (a4 + b4++) / -c3;
        System.out.println("Результат вычисления примера 5.4: " + result4);
        // 1) Скобки имеют больший приоритет, чем деление.
        // 2) Операция инкремента записана в постфиксальной форме, поэтому значение b4 увеличивается поеле его
        // использования в операции сложения.
        // 5 + 2 = 7 (результат операции в скобках). Значение b4 уже 3 (сохранено в памяти).
        // 3) Деление. 7 / (-8) = - 0.875. При делении целочисленных выражений дробная чать отбрасывается.
        // Результату присваивается знак делимого (+).
        // Результат операции деления: 0.
        // Ответ: 0. Результат совпадает. Программа работает корректно.

        //5.5 (5 * 2 » 2++) / —8
        int a5 = 5;
        int b5 = 2;
        int c5 = 8;
        int result5 = (a5 * b5 >> b5++) / - c5;
        System.out.println("Результат вычисления примера 5.5: " + result5);
        // 1) Скобки имеют больший приоритет, чем деление.
        // 2) Умножение имеет больший приоритет, чем операция сдвига вправо.
        // Операция инкремента записана в постфиксальной форме, поэтому значение b5 увеличивается поеле его
        // использования в операции сдвига вправо.
        // т.о. 5 * 2 = 10 dec. Это 0000_1010 bin. После сдвига вправо на 2 знака получаем 0000_0010 bin,
        // что в десятичной системе равняется 2.
        // 2 - Это результат операций в скобках. Значение b5 уже 3 (сохранено в памяти).
        // 3) Деление. 2 / -8 = -0.25. При делении целочисленных выражений дробная чать отбрасывается.
        // Результату присваивается знак делимого (+).
        // Результат операции деления: 0.
        // Ответ: 0. Результат совпадает. Программа работает корректно.

        //5.6 (5 + 7 > 20 ? 68 : 22 * 2 » 2++) / -- 8
        int a6 = 5;
        int b6 = 7;
        int c6 = 20;
        int d6 = 68;
        int e6 = 22;
        int f6 = 2;
        int g6 = 8;
        int result6 = (a6 + b6 > c6 ? d6 : e6 * f6 >> f6++) / -- g6;
        System.out.println("Результат вычисления примера 5.6: " + result6);
        // 1) Скобки имеют больший приоритет, чем деление.
        // 2) Сложение имеют больший приоритет, чем тернарный оператор.
        // т.о. 5 + 7 = 12
        // 3) Тернарная операция. Результатом сравнения 12 > 20 является false, поэтому испльзуется второе значение: 22.
        // 4) Умножение имеет больший приоритет, чем операция сдвига вправо.
        // 5)Операция инкремента записана в постфиксальной форме, поэтому значение f6 увеличивается поеле его
        // использования в операции сдвига вправо.
        // т.о. 22 * 2 = 44 dec, что в двоичной системе равно 0010_1100.
        // После сдвига вправо на 2 знака получаем двоичное 0000_1011, что соответствует десятичному числу 11.
        // Результат операций в скобках равен 11, значение f6 уже равно 3 (сохранено в памяти).
        // 5. Операция декремента уменьшает операнд 8 на 1 до его использования в операции деления.
        // 8 - 1 = 7
        // Деление. 11 / 7 = 1.5714285714. При делении целочисленных выражений дробная чать отбрасывается.
        // Результат операции деления: 1.
        // Ответ: 1. Результат совпадает. Программа работает корректно.

        /*
        //5.7 (5 + 7 > 20 ? 68 => 68 : 22 * 2 >> 2++) / -- 8
        int a7 = 5;
        int b7 = 7;
        int c7 = 20;
        int d7 = 68;
        int e7 = 22;
        int f7 = 2;
        int g7 = 8;
        int result7 = (a7 + b7 > c7 ? d7 => d7 : e7 * f7 >> f7++) / -- g7;
        System.out.println("Результат вычисления примера 5.6: " + result7);
        // В тернарном выражении на месте ":" стоит знак "=>". Даже если знак "=>" должен обозначать больше или равно,
        // он записан не верно. Нет смыла описывать остальные действия, т.к. в результате работы программы все равно
        // будет ошибка компиляции.
        */
        System.out.println("Результат вычисления примера 5.7: ошибка компиляции.");

        //5.8   6 - 2 > 3 && 12 * 12 <= 119
        int a8 = 6;
        int b8 = 2;
        int c8 = 3;
        int d8 = 12;
        int e8 = 119;
        boolean result8 = a8 - b8 > c8 && d8 * d8 <= e8;
        System.out.println("Результат вычисления примера 5.8: " + result8);
        // 1) Вычитание имеет больший приоритет, чем сравнение. 6 - 2 = 4
        // 2) Сравнение имеет больший приоритет, чем логическое И. 4 > 3 (true)
        // 3) Умножение имеет больший приоритет, чем сравнение и логическое И. 12*12 = 144.
        // 4) Сравнение имеет больший приоритет, чем логическое И. 144 <= 119 (false).
        // 5) Операция логического И. true && false - результат false.
        // Ответ: false. Результат совпадает. Программа работает корректно.

        //5.9 true && false
        boolean a9 = true;
        boolean b9 = false;
        boolean result9 = a9 && b9;
        System.out.println("Результат вычисления примера 5.9: " + result9);
        // В результате операции логического И значение true получается только если в обеих частьях true.
        // Ответ: false. Результат совпадает. Программа работает корректно.

    }
}
